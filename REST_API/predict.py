# -*- coding: utf-8 -*-
"""Copy of DL_Project_Fantasy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uq-AwR_tvAnIDaR3Bj5W1zkSzLp9bMTb

# IMPORT AND UTILS
"""

import numpy as np
import pickle
import requests
import pandas


def __init__(self,team_id,next_game_week_test):
  self.run(team_id,next_game_week_test)

"""# Prepare Input"""

def add_type1_features(player , curr_index , gws , x,mode='train'): #predicting index+1
  if mode == 'train':
    f1_indices =[5,16,20,22]
  elif mode == 'test':
    f1_indices =[2,7,10,11]
  current_gameweek =gws[curr_index].loc[gws[curr_index]['name']==player].values[0]
  for index in f1_indices :
    x.append(current_gameweek[index])

def add_type2_features(player ,curr_index , gws , x,f2_indices_mean):
  if curr_index > 1 :
    pgws = gws[curr_index-1:curr_index]
  else:
    pgws = gws[:curr_index]
  prev_gameweeks =[]
  for gw in pgws :
    if len(gw.loc[gw['name']==player].values) == 0 :
      continue
    prev_gameweeks.append(gw.loc[gw['name']==player].values[0])
  for i in f2_indices_mean :
    ls =[row[i] for row in prev_gameweeks]
    if len(ls)!=0:
      mean = np.array(ls).mean()
      x.append(mean)
    else:
      x.append(0)


def add_type2_features_position(pos,player ,curr_index , gws , x,mode='train'):
  if mode == 'train':
      if pos ==1:
      #old f2_mean = [3,7,8,9,10,14,15,17,23,30,35,36,37,39,42,54]#16
        f2_mean = [7,10,18,35,37,39,54]
      elif pos ==2:
        #old f2_mean = [2,3,7,8,9,10,14,15,17,23,30,32,36,37,42,54]#16 I deleted 11(dribble)
        f2_mean = [1,7,10,18,32,37,54]
      elif pos ==3:
        #old f2_mean = [1,3,4,7,9,10,11,14,15,17,18,19,23,37,42,54]#16 I deleted 2(attempted passes)
        f2_mean = [1,7,10,19,37,46,54]
      elif pos ==4:
        #old f2_mean = [1,3,4,9,10,11,18,19,23,29,33,34,37,46,53,54]#16
        f2_mean = [1,10,19,34,37,46,54]
  elif mode == 'test':
      if pos ==1:
        f2_mean = [4,5,8,17,18,20,31]
      elif pos ==2:
        f2_mean = [1,4,5,8,15,18,31]
      elif pos ==3:
        f2_mean = [1,4,5,9,18,24,31]
      elif pos ==4:
        f2_mean = [1,5,9,16,18,24,31]

  add_type2_features(player,curr_index,gws,x,f2_mean)


def add_type3_features(player ,curr_index , gws , x,mode='train'):
  if mode == 'train':
    f3_indices =[48,49,50,51]
  elif mode == 'test':
    f3_indices =[26,27,28,29]

  if(len(gws) -1 <= curr_index) :
    next_gameweek = gws[curr_index].loc[gws[curr_index]['name']==player].values[0]
  else :
    next_gameweek =gws[curr_index].loc[gws[curr_index]['name']==player].values[0]
  for i in f3_indices :
    f =next_gameweek[i]
    x.append(f)

def add_type4_features(player ,curr_index , gws , x,mode='train'):
  if mode == 'train':
    f4_indices =[16,31,52]
  elif mode == 'test':
    f4_indices = [7,14,30]
  ngw = None
  if(len(gws)-4 > curr_index) :
    ngw = gws[curr_index:curr_index+3]
  else :
    ngw = gws[curr_index:]
  next_gameweeks =[]
  for gw in ngw :
    if len(gw.loc[gw['name']==player].values) == 0 :
      continue
    next_gameweeks.append(gw.loc[gw['name']==player].values[0])
  for i in f4_indices :
    ls =[row[i] for row in next_gameweeks]
    mean = np.array(ls).mean()
    x.append(mean)

class goalkeeper:
  def __init__(self,train,out,ids=[]):
    self.X = np.array([x for x in train])
    self.Y = np.array(out)
    self.ID = ids
class defender:
  def __init__(self,train,out,ids=[]):
    self.X = np.array([x for x in train])
    self.Y = np.array(out)
    self.ID = ids
class midfielder:
  def __init__(self,train,out,ids=[]):
    self.X = np.array([x for x in train])
    self.Y = np.array(out)
    self.ID = ids
class stricker:
  def __init__(self,train,out,ids=[]):
    self.X = np.array([x for x in train])
    self.Y = np.array(out)
    self.ID = ids
class player:
  def __init__(self,g,d,m,s):
    self.goalkeeper = g
    self.defender = d
    self.midefield = m
    self.stricker = s

def read_models():
  models = []
  with open('models/GModel.data', 'rb') as f:
    models.append(pickle.load(f))
  with open('models/DModel.data', 'rb') as f:
    models.append(pickle.load(f))
  with open('models/MModel.data', 'rb') as f:
    models.append(pickle.load(f))
  with open('models/SModel.data', 'rb') as f:
    models.append(pickle.load(f))
  return models

"""# Prepare Testing Data"""

def read_test_data():
  with open('test/test.data', 'rb') as f:
    test_data = pickle.load(f)
  with open('test/positions.data', 'rb') as f:
    positions = pickle.load(f)
  with open('test/test_dic.data', 'rb') as h:
    test = pickle.load(h)
  g = goalkeeper(test['gx'],test['gy'],test['gid'])
  d = defender(test['dx'],test['dy'],test['did'])
  m = midfielder(test['mx'],test['my'],test['mid'])
  s = stricker(test['sx'],test['sy'],test['sid'])
  test_dict = player(g,d,m,s)
  return test_data,positions,test_dict

"""# Evaluating"""

def add_features_test(test_data,positions,gws=[29]):
  data = {"gx":[],"dx":[],"mx":[],"sx":[],"gy":[],"dy":[],"my":[],"sy":[],"gid":[],"did":[],"mid":[],"sid":[]}
  c_season = 0
  for s in test_data :
    position = positions[c_season]
    c_season+=1
    for i in gws:
      i=i-1
      for p in s[i-1]['name']:
        Pid = s[i-1].loc[s[i-1]['name']==p].values[0][6]
        pos_tmp = position.loc[position['id']==Pid]['element_type'].values[0]
        x=[]
        y=[]
        add_type1_features(p,i-1,s,x,'test')
        add_type2_features_position(pos_tmp,p,i-1,s,x,'test')
        add_type3_features(p,i-1,s,x,'test')
        add_type4_features(p,i-1,s,x,'test')

        if len(s[i].loc[s[i]['name']==p].values) > 0:
            y=s[i].loc[s[i]['name']==p].values[0][25]
            if pos_tmp ==1:
              data['gx'].append(x)
              data['gy'].append(y)
              data['gid'].append(Pid)
            elif pos_tmp == 2 :
              data['dx'].append(x)
              data['dy'].append(y)
              data['did'].append(Pid)
            elif pos_tmp ==3:
              data['mx'].append(x)
              data['my'].append(y)
              data['mid'].append(Pid)
            elif pos_tmp == 4:
              data['sx'].append(x)
              data['sy'].append(y)
              data['sid'].append(Pid)
        else:
            print(len(s[i].loc[s[i]['name']==p].values),s[i].loc[s[i]['name']==p].values)
  return data

def prep_input(test,pos,next_game_week_test):
  test = add_features_test(test,pos,[next_game_week_test])
  g = goalkeeper(test['gx'],test['gy'],test['gid'])
  d = defender(test['dx'],test['dy'],test['did'])
  m = midfielder(test['mx'],test['my'],test['mid'])
  s = stricker(test['sx'],test['sy'],test['sid'])
  test_dict = player(g,d,m,s)
  return test_dict


def compute_step(X, W, b, last):
  Z = np.add(np.dot(W.T, X), np.array([b] * X.shape[1]).T)
  if last:
    return Z
  else:
    return np.maximum(Z, np.zeros(Z.shape))


def predict(X, layers):
  A = np.copy(X.T)
  for i in range(0, len(layers)):

    A = compute_step(A, layers[i][0], layers[i][1], i == (len(layers) - 1) or i == 0)
  return A.reshape(len(X),1)

"""# Deployment"""

def get_team(team_id,next_game_week_test):
  try:
      entry_season_request = requests.get(f'https://fantasy.premierleague.com/api/entry/{team_id}/event/{next_game_week_test-1}/picks/')
      entry_season_data = entry_season_request.json()
      entry_season_data['entry'] = team_id
      entry_season_data['event'] = next_game_week_test
  except Exception as e:
    print("Error in request")
  return entry_season_data['picks']

def get_player_type(pid,positions):
  return positions[0].loc[positions[0]['id']==pid]['element_type'].values[0]
def compare(Y_pred,points,val,ids,test_data,next_game_week_test):
  ind = -1
  for i in range(0,len(Y_pred)):
    pid = ids[i]
    new_val = test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==pid].values[0][29]
    if (Y_pred[i][0]>points and new_val<=val):
      points = Y_pred[i][0]
      ind = i
  return ind

def get_best_transfer(position,pid,test_data,test_dict,next_game_week_test,models):
  old_name = test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==pid].values[0][0]
  old_val =  test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==pid].values[0][29]
  if position ==1:
    if(pid not in test_dict.goalkeeper.ID):
       return []
    ind = test_dict.goalkeeper.ID.index(pid)
    Y_pred =predict(test_dict.goalkeeper.X,models[0])
    old_points = Y_pred[ind][0]
    new_ind = compare(Y_pred,old_points,old_val,test_dict.goalkeeper.ID,test_data,next_game_week_test)
    new_id = test_dict.goalkeeper.ID[new_ind]
    new_points = Y_pred[new_ind]
    new_name = test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==new_id].values[0][0]
    #new_val =  test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==new_id].values[0][29]
  elif position == 2 :
    if(pid not in test_dict.defender.ID):
       return []
    ind = test_dict.defender.ID.index(pid)
    Y_pred =predict(test_dict.defender.X,models[1])
    old_points = Y_pred[ind][0]
    new_ind = compare(Y_pred,old_points,old_val,test_dict.defender.ID,test_data,next_game_week_test)
    new_id = test_dict.defender.ID[new_ind]
    new_points = Y_pred[new_ind]
    new_name = test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==new_id].values[0][0]
    #new_val =  test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==new_id].values[0][29]
  elif position ==3:
    if(pid not in test_dict.midefield.ID):
      return []
    ind = test_dict.midefield.ID.index(pid)
    Y_pred =predict(test_dict.midefield.X,models[2])
    old_points = Y_pred[ind][0]
    new_ind = compare(Y_pred,old_points,old_val,test_dict.midefield.ID,test_data,next_game_week_test)
    new_id = test_dict.midefield.ID[new_ind]
    new_points = Y_pred[new_ind]
    new_name = test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==new_id].values[0][0]
    #new_val =  test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==new_id].values[0][29]
  elif position == 4:
    if(pid not in test_dict.stricker.ID):
      return []
    ind = test_dict.stricker.ID.index(pid)
    Y_pred =predict(test_dict.stricker.X,models[3])
    old_points = Y_pred[ind][0]
    new_ind = compare(Y_pred,old_points,old_val,test_dict.stricker.ID,test_data,next_game_week_test)
    new_id = test_dict.stricker.ID[new_ind]
    new_points = Y_pred[new_ind]
    new_name = test_data[0][next_game_week_test-1].loc[test_data[0][next_game_week_test-1]['element']==new_id].values[0][0]
  return [old_name,str(old_points),new_name,str(new_points[0]),str(position)]

def construct_table(team,pos,test_data,test_dict,next_game_week_test,models):
  data = []
  for player in team:
    p_type = get_player_type(player['element'],pos)
    data.append(get_best_transfer(p_type,player['element'],test_data,test_dict,next_game_week_test,models))
  return data

def run(team_id,next_game_week_test):
  models = read_models()
  test_data,pos,test_dict = read_test_data()
  #test_dict = prep_input(test_data,pos,next_game_week_test)
  team = get_team(team_id,next_game_week_test)
  table = construct_table(team,pos,test_data,test_dict,next_game_week_test,models)
  return table

